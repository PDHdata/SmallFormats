# Generated by Django 4.1.2 on 2022-11-10 14:35

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Card',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('identity_w', models.BooleanField(default=False, verbose_name='is W')),
                ('identity_u', models.BooleanField(default=False, verbose_name='is U')),
                ('identity_b', models.BooleanField(default=False, verbose_name='is B')),
                ('identity_r', models.BooleanField(default=False, verbose_name='is R')),
                ('identity_g', models.BooleanField(default=False, verbose_name='is G')),
                ('type_line', models.CharField(max_length=50)),
                ('scryfall_uri', models.URLField()),
            ],
        ),
        migrations.CreateModel(
            name='CardInDeck',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_pdh_commander', models.BooleanField(default=False, verbose_name='is PDH commander')),
            ],
        ),
        migrations.CreateModel(
            name='Deck',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('source', models.IntegerField(choices=[(0, 'Unknown/other'), (1, 'Archidekt')])),
                ('source_id', models.CharField(blank=True, max_length=20)),
                ('source_link', models.URLField(blank=True)),
                ('creator_display_name', models.CharField(blank=True, max_length=50)),
                ('ingested_time', models.DateTimeField(auto_now_add=True)),
                ('updated_time', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='Printing',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('set_code', models.CharField(max_length=5)),
                ('rarity', models.CharField(choices=[('C', 'common'), ('U', 'uncommon'), ('R', 'rare'), ('S', 'special'), ('M', 'mythic'), ('B', 'bonus')], max_length=1)),
                ('image_uri', models.URLField(blank=True)),
                ('card', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='printings', to='decklist.card')),
            ],
        ),
        migrations.AddConstraint(
            model_name='deck',
            constraint=models.UniqueConstraint(fields=('source', 'source_id'), name='one_entry_per_deck'),
        ),
        migrations.AddField(
            model_name='cardindeck',
            name='card',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='deck_list', to='decklist.card'),
        ),
        migrations.AddField(
            model_name='cardindeck',
            name='deck',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='card_list', to='decklist.deck'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
