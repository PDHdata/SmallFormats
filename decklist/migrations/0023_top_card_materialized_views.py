# Generated by Django 4.1.3 on 2023-02-18 18:26

from django.db import migrations
from django.db import connections
_WE_ARE_POSTGRES = True if connections['default'].vendor == 'postgresql' else False
_WE_ARE_SQLITE = True if connections['default'].vendor == 'sqlite' else False


POSTGRES_PRELUDE = 'CREATE MATERIALIZED VIEW {view_name} AS'
POSTGRES_POSTLUDE = 'CREATE UNIQUE INDEX {view_name}_pk ON {view_name}(card_id);'
POSTGRES_LIKE = 'WHERE "decklist_card"."type_line"::text LIKE \'%Land%\''
POSTGRES_NOTLIKE = 'WHERE NOT ("decklist_card"."type_line"::text LIKE \'%Land%\')'
POSTGRES_DROP = 'DROP MATERIALIZED VIEW {view_name};'

SQLITE_PRELUDE = 'CREATE VIEW {view_name} AS'
SQLITE_POSTLUDE = ''
SQLITE_LIKE = 'WHERE "decklist_card"."type_line" LIKE \'%Land%\' ESCAPE \'\\\''
SQLITE_NOTLIKE = 'WHERE NOT ("decklist_card"."type_line" LIKE \'%Land%\' ESCAPE \'\\\')'
SQLITE_DROP = 'DROP VIEW {view_name};'

# These were created by asking the for str(Card.objects.top().query) and
# friends. They differ per database vendor. Then, the contents of the
# real Card object were replaced with `card_id` by hand. If the shape
# of those top-card queries ever changes, these views will need to be
# mutated as well.
TOP_CARDS_SQL = """
{prelude}
SELECT
  "decklist_card"."id" AS "card_id",
  COUNT(DISTINCT "decklist_cardindeck"."id")
    FILTER (WHERE "decklist_deck"."pdh_legal")
    AS "num_decks",
  RANK() OVER (ORDER BY COUNT(DISTINCT "decklist_cardindeck"."id")
    FILTER (WHERE "decklist_deck"."pdh_legal") DESC)
    AS "rank"
FROM "decklist_card"
LEFT OUTER JOIN "decklist_cardindeck"
  ON ("decklist_card"."id" = "decklist_cardindeck"."card_id")
LEFT OUTER JOIN "decklist_deck"
  ON ("decklist_cardindeck"."deck_id" = "decklist_deck"."id")
GROUP BY "decklist_card"."id"
  HAVING COUNT(DISTINCT "decklist_cardindeck"."id")
  FILTER (WHERE ("decklist_deck"."pdh_legal")) > 0
;
{postlude}
"""

TOP_LAND_CARDS_SQL = """
{prelude}
SELECT
  "decklist_card"."id" AS "card_id",
  COUNT(DISTINCT "decklist_cardindeck"."id")
    FILTER (WHERE "decklist_deck"."pdh_legal")
    AS "num_decks",
  RANK() OVER (ORDER BY COUNT(DISTINCT "decklist_cardindeck"."id")
    FILTER (WHERE "decklist_deck"."pdh_legal") DESC)
    AS "rank"
FROM "decklist_card"
LEFT OUTER JOIN "decklist_cardindeck"
  ON ("decklist_card"."id" = "decklist_cardindeck"."card_id")
LEFT OUTER JOIN "decklist_deck"
  ON ("decklist_cardindeck"."deck_id" = "decklist_deck"."id")
{where_like}
GROUP BY "decklist_card"."id"
  HAVING COUNT(DISTINCT "decklist_cardindeck"."id")
  FILTER (WHERE ("decklist_deck"."pdh_legal")) > 0
;
{postlude}
"""

TOP_NON_LAND_CARDS_SQL = """
{prelude}
SELECT
  "decklist_card"."id" AS "card_id",
  COUNT(DISTINCT "decklist_cardindeck"."id")
    FILTER (WHERE "decklist_deck"."pdh_legal")
    AS "num_decks",
  RANK() OVER (ORDER BY COUNT(DISTINCT "decklist_cardindeck"."id")
    FILTER (WHERE "decklist_deck"."pdh_legal") DESC)
    AS "rank"
FROM "decklist_card"
LEFT OUTER JOIN "decklist_cardindeck"
  ON ("decklist_card"."id" = "decklist_cardindeck"."card_id")
LEFT OUTER JOIN "decklist_deck"
  ON ("decklist_cardindeck"."deck_id" = "decklist_deck"."id")
{where_not_like}
GROUP BY "decklist_card"."id"
  HAVING COUNT(DISTINCT "decklist_cardindeck"."id")
  FILTER (WHERE ("decklist_deck"."pdh_legal")) > 0
;
{postlude}
"""

if _WE_ARE_POSTGRES:
    TOP_CARDS_SQL = TOP_CARDS_SQL.format(
        prelude=POSTGRES_PRELUDE,
        postlude=POSTGRES_POSTLUDE,
    )
    TOP_LAND_CARDS_SQL = TOP_LAND_CARDS_SQL.format(
        prelude=POSTGRES_PRELUDE,
        where_like=POSTGRES_LIKE,
        postlude=POSTGRES_POSTLUDE,
    )
    TOP_NON_LAND_CARDS_SQL = TOP_NON_LAND_CARDS_SQL.format(
        prelude=POSTGRES_PRELUDE,
        where_not_like=POSTGRES_NOTLIKE,
        postlude=POSTGRES_POSTLUDE,
    )
    TOP_CARDS_DROP_SQL = POSTGRES_DROP[:]
    TOP_LAND_CARDS_DROP_SQL = POSTGRES_DROP[:]
    TOP_NON_LAND_CARDS_DROP_SQL = POSTGRES_DROP[:]
elif _WE_ARE_SQLITE:
    TOP_CARDS_SQL = TOP_CARDS_SQL.format(
        prelude=SQLITE_PRELUDE,
        postlude=SQLITE_POSTLUDE,
    )
    TOP_LAND_CARDS_SQL = TOP_LAND_CARDS_SQL.format(
        prelude=SQLITE_PRELUDE,
        where_like=SQLITE_LIKE,
        postlude=SQLITE_POSTLUDE,
    )
    TOP_NON_LAND_CARDS_SQL = TOP_NON_LAND_CARDS_SQL.format(
        prelude=SQLITE_PRELUDE,
        where_not_like=SQLITE_NOTLIKE,
        postlude=SQLITE_POSTLUDE,
    )
    TOP_CARDS_DROP_SQL = SQLITE_DROP[:]
    TOP_LAND_CARDS_DROP_SQL = SQLITE_DROP[:]
    TOP_NON_LAND_CARDS_DROP_SQL = SQLITE_DROP[:]
else:
    from django.core.exceptions import ImproperlyConfigured
    raise ImproperlyConfigured("views were only tested on Postgres and SQLite")

class Migration(migrations.Migration):

    dependencies = [
        ('decklist', '0022_top_card_models'),
    ]

    operations = [
        migrations.RunSQL(TOP_CARDS_SQL.format(view_name='decklist_topcardview'), TOP_CARDS_DROP_SQL.format(view_name='decklist_topcardview')),
        migrations.RunSQL(TOP_LAND_CARDS_SQL.format(view_name='decklist_toplandcardview'), TOP_LAND_CARDS_DROP_SQL.format(view_name='decklist_toplandcardview')),
        migrations.RunSQL(TOP_NON_LAND_CARDS_SQL.format(view_name='decklist_topnonlandcardview'), TOP_NON_LAND_CARDS_DROP_SQL.format(view_name='decklist_topnonlandcardview')),
    ]
